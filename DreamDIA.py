import os
import click
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
from dream_score import dream_score
CONTEXT_SETTINGS = dict(help_option_names = ['-h', '--help'], max_content_width = 120)
def print_version(ctx, param, value):
    if not value or ctx.resilient_parsing:
        return
    click.echo('DreamDIA-XMBD Version 2.0.3')
    ctx.exit()
@click.group(context_settings = CONTEXT_SETTINGS)
@click.option('--version', is_flag = True, callback = print_version, expose_value = False, is_eager = True, help = "Print version and exit.")
def dreamdia():
    pass
@dreamdia.command(context_settings = CONTEXT_SETTINGS)
@click.option("--file_dir", required = True, type = click.Path(exists = True), help = "Directory that contains only DIA data files. Centroided .mzXML, .mzML or .raw files from Thermo Fisher equipments are supported. (For Linux systems, `mono` tool has to be installed for the supporting of .raw files. https://www.mono-project.com/download/stable/#download-lin)")
@click.option("--lib", required = True, type = click.Path(exists = True), help = "File name of the spectral library. .tsv or .csv formats are supported.")
@click.option("--out", required = True, type = click.Path(exists = False), help = "Directory for output files.")
@click.option("--n_threads", default = 32, show_default = True, type = int, help = "Number of threads.")
@click.option("--seed", default = 123, show_default = True, type = int, help = "Random seed for decoy generation.")
@click.option("--mz_unit", default = "Da", show_default = True, type = click.Choice(['Da', 'ppm']), help = "m/z unit for m/z range and tolerance settings.")
@click.option("--mz_min", default = "99", show_default = True, type = int, help = "Minimum of m/z value.")
@click.option("--mz_max", default = "1801", show_default = True, type = int, help = "Maximum of m/z value.")
@click.option("--mz_tol_ms1", default = "0.01", show_default = True, type = float, help = "m/z tolerance for MS1.")
@click.option("--mz_tol_ms2", default = "0.03", show_default = True, type = float, help = "m/z tolerance for MS2.")
@click.option("--fdr_precursor", default = "0.01", show_default = True, type = float, help = "FDR of precursor level.")
@click.option("--fdr_protein", default = "0.01", show_default = True, type = float, help = "FDR of protein level.")
@click.option("--n_irt", default = "500", show_default = True, type = int, help = "Number of endogenous precursors for RT normalization.")
@click.option("--top_k", default = "10", show_default = True, type = int, help = "Number of RSMs for each precursor to extract.")
@click.option("--n_cycles", default = "300", show_default = True, type = int, help = "Number of RT cycles to search for RSMs for each precursor. Must be greater than (topk + model_cycles - 1).")
@click.option("--n_frags_each_precursor", default = "3", show_default = True, type = int, help = "Number of fragment ions at least for each precursor.")
@click.option("--do_not_output_library", is_flag = True, help = "Do not output the library with decoys generated by DreamDIA-XMBD. If this option is not activated, the library with decoys will be saved at the same directory of the input library.")
@click.option("--model_cycles", default = "12", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of RT cycles of the XICs.")
@click.option("--n_lib_frags", default = "20", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'library' part of the RSMs of the deep representation models.")
@click.option("--n_self_frags", default = "50", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'self' part of the RSMs of the deep representation models.")
@click.option("--n_qt3_frags", default = "10", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'qt3' part of the RSMs of the deep representation models.")
@click.option("--n_ms1_frags", default = "10", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'ms1' part of the RSMs of the deep representation models.")
@click.option("--n_iso_frags", default = "20", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'iso' part of the RSMs of the deep representation models.")
@click.option("--n_light_frags", default = "20", show_default = True, type = int, help = "(# Do not modify this argument unless customed deep representation models are used.) Number of XICs in 'light' part of the RSMs of the deep representation models.")
@click.option("--prophet_mode", default = "local", show_default = True, type = click.Choice(["local", "global"]), help = "Train a disciminant model on the RSMs of each sample respectively (local) or train a discriminant model on all the RSMs from all the samples (global).")
@click.option("--disc_model", default = "xgboost", show_default = True, type = click.Choice(["xgboost", "rf"]), help = "Type of the discriminant model.")
@click.option("--dream_indicators", is_flag = True, help = "[Deprecated] Activate Dream-Indicators to search better hyper-parameters for the discriminant model. If this option is not activated, the depths of the trees in the discriminant model will be heuristically set to a fixed value.")
@click.option("--rt_norm_model", default = "nonlinear", show_default = True, type = click.Choice(['linear', 'nonlinear']), help = "Use linear or nonlinear model for RT normalizaiton.")
@click.option("--score0_cutoff", default = "500", show_default = True, type = float, help = "Cut off value of score0.")
@click.option("--score2_cutoff", default = "0.15", show_default = True, type = float, help = "Cut off value of score2.")
@click.option("--out_chrom", is_flag = True, help = "Whether to output chromatograms for debugging.")
@click.option("--decoy_method", default = "shuffle", show_default = True, type = click.Choice(["shuffle", "reverse", "pseudo_reverse", "shift", "mutate"]), help = "Decoy generation method.")
def dreamScore(file_dir, lib, out, n_threads, seed, mz_unit, mz_min, mz_max, mz_tol_ms1, mz_tol_ms2, fdr_precursor, fdr_protein, n_irt, top_k, n_cycles, n_frags_each_precursor, do_not_output_library, model_cycles, n_lib_frags, n_self_frags, n_qt3_frags, n_ms1_frags, n_iso_frags, n_light_frags, prophet_mode, disc_model, dream_indicators, rt_norm_model, score0_cutoff, score2_cutoff, out_chrom, decoy_method):    
    dream_score(file_dir, lib, out, n_threads, seed, mz_unit, mz_min, mz_max, mz_tol_ms1, mz_tol_ms2, fdr_precursor, fdr_protein, n_irt, top_k, n_cycles, n_frags_each_precursor, do_not_output_library, model_cycles, n_lib_frags, n_self_frags, n_qt3_frags, n_ms1_frags, n_iso_frags, n_light_frags, prophet_mode, disc_model, dream_indicators, rt_norm_model, score0_cutoff, score2_cutoff, out_chrom, decoy_method)
if __name__ == "__main__":
    dreamdia()
